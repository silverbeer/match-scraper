[project]
name = "mls-match-scraper"
version = "1.0.0"
description = "Automated MLS match data scraper for missing-table.com"
authors = [
    {name = "MLS Scraper Team", email = "team@example.com"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "playwright>=1.40.0",
    "python-json-logger>=2.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "opentelemetry-instrumentation-requests>=0.41b0",
    "requests>=2.31.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pytest-playwright>=0.7.1",
    "python-dotenv>=1.1.1",
    "grafana-otel-py",
]

[project.scripts]
run-e2e-test = "scripts.run_e2e_test:main"
mls-scraper = "src.cli.main:app"

[dependency-groups]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.3.0",
    "pre-commit>=3.5.0",
    "mypy>=1.6.0",
    "types-requests>=2.31.0",
    "pytest-html>=4.1.1",
    "pytest-json-report>=1.5.0",
    "diff-cover>=9.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "debug: marks tests as debug tests (run manually when needed)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 25
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.uv.sources]
grafana-otel-py = { git = "https://github.com/silverbeer/grafana-otel-py.git", rev = "v0.2.0" }
