"""Environment variable configuration utilities for MLS Match Scraper CLI."""

import os
from pathlib import Path
from typing import Dict, Optional, Tuple

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.table import Table
from rich.text import Text

console = Console()

# Required and optional environment variables
REQUIRED_ENV_VARS = {
    "MISSING_TABLE_API_BASE_URL": {
        "description": "API endpoint for missing-table service",
        "default": "https://api.missing-table.com",
        "example": "https://api.missing-table.com",
    },
    "MISSING_TABLE_API_TOKEN": {
        "description": "API token for missing-table service (your SA token)",
        "default": None,
        "example": "your-service-account-token-here",
        "sensitive": True,
    },
}

OPTIONAL_ENV_VARS = {
    "LOG_LEVEL": {
        "description": "Logging level for CLI",
        "default": "WARNING",
        "example": "INFO",
        "choices": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    },
    "AGE_GROUP": {
        "description": "Default age group",
        "default": "U14",
        "example": "U16",
        "choices": ["U13", "U14", "U15", "U16", "U17", "U18", "U19"],
    },
    "DIVISION": {
        "description": "Default division",
        "default": "Northeast",
        "example": "Southwest",
        "choices": [
            "Northeast", "Southeast", "Central", "Southwest", "Northwest",
            "Mid-Atlantic", "Great Lakes", "Texas", "California"
        ],
    },
    "LOOK_BACK_DAYS": {
        "description": "Default number of days to look ahead",
        "default": "3",
        "example": "7",
    },
}


def get_env_file_path() -> Path:
    """Get the path to the .env file in the project root."""
    # Find project root by looking for pyproject.toml
    current_path = Path.cwd()
    while current_path != current_path.parent:
        if (current_path / "pyproject.toml").exists():
            return current_path / ".env"
        current_path = current_path.parent

    # Fallback to current directory
    return Path.cwd() / ".env"


def load_env_file() -> Dict[str, str]:
    """Load environment variables from .env file."""
    env_file = get_env_file_path()
    env_vars = {}

    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        # Remove quotes if present
                        value = value.strip('"\'')
                        env_vars[key.strip()] = value
        except Exception as e:
            console.print(f"[yellow]Warning: Could not read .env file: {e}[/yellow]")

    return env_vars


def save_env_file(env_vars: Dict[str, str]) -> bool:
    """Save environment variables to .env file."""
    env_file = get_env_file_path()

    try:
        # Create directory if it doesn't exist
        env_file.parent.mkdir(parents=True, exist_ok=True)

        with open(env_file, 'w') as f:
            f.write("# MLS Match Scraper Environment Configuration\n")
            f.write("# Generated by mls-scraper config command\n\n")

            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")

        return True
    except Exception as e:
        console.print(f"[red]Error saving .env file: {e}[/red]")
        return False


def get_current_config() -> Tuple[Dict[str, Optional[str]], Dict[str, Optional[str]]]:
    """Get current configuration from environment and .env file."""
    env_file_vars = load_env_file()

    required_config = {}
    optional_config = {}

    # Check required variables
    for var_name, var_info in REQUIRED_ENV_VARS.items():
        # Check environment first, then .env file
        value = os.getenv(var_name) or env_file_vars.get(var_name)
        required_config[var_name] = value

    # Check optional variables
    for var_name, var_info in OPTIONAL_ENV_VARS.items():
        # Check environment first, then .env file, then default
        value = os.getenv(var_name) or env_file_vars.get(var_name) or var_info["default"]
        optional_config[var_name] = value

    return required_config, optional_config


def display_current_config():
    """Display current environment configuration."""
    required_config, optional_config = get_current_config()
    env_file = get_env_file_path()

    console.print(Panel(
        f"Environment configuration\n"
        f"Config file: [cyan]{env_file}[/cyan]\n"
        f"File exists: [{'green' if env_file.exists() else 'red'}]"
        f"{'Yes' if env_file.exists() else 'No'}[/]",
        title="🔧 Configuration Status",
        border_style="blue"
    ))

    # Required variables table
    required_table = Table(title="📋 Required Variables", show_header=True)
    required_table.add_column("Variable", style="cyan")
    required_table.add_column("Status", style="white")
    required_table.add_column("Value", style="dim")

    for var_name, value in required_config.items():
        var_info = REQUIRED_ENV_VARS[var_name]
        if value:
            status = "[green]✅ Set[/green]"
            display_value = "***" if var_info.get("sensitive") else value[:50] + ("..." if len(str(value)) > 50 else "")
        else:
            status = "[red]❌ Missing[/red]"
            display_value = "[red]Not set[/red]"

        required_table.add_row(var_name, status, display_value)

    console.print(required_table)
    console.print()

    # Optional variables table
    optional_table = Table(title="⚙️ Optional Variables", show_header=True)
    optional_table.add_column("Variable", style="cyan")
    optional_table.add_column("Value", style="white")
    optional_table.add_column("Default", style="dim")

    for var_name, value in optional_config.items():
        var_info = OPTIONAL_ENV_VARS[var_name]
        default_value = var_info["default"] or "None"
        display_value = value if value else "[dim]Using default[/dim]"

        optional_table.add_row(var_name, display_value, default_value)

    console.print(optional_table)


def interactive_setup():
    """Interactive setup of environment variables."""
    console.print("[bold]🚀 Interactive Environment Setup[/bold]\n")
    console.print("This will help you configure the required environment variables.\n")

    env_file_vars = load_env_file()
    new_config = dict(env_file_vars)  # Start with existing values

    # Configure required variables
    console.print("[bold cyan]Required Variables:[/bold cyan]\n")

    for var_name, var_info in REQUIRED_ENV_VARS.items():
        current_value = os.getenv(var_name) or env_file_vars.get(var_name)

        console.print(f"[cyan]{var_name}[/cyan]")
        console.print(f"Description: {var_info['description']}")
        if var_info.get('example'):
            console.print(f"Example: {var_info['example']}")

        if current_value:
            if var_info.get("sensitive"):
                console.print(f"Current: [dim]***[/dim]")
            else:
                console.print(f"Current: [green]{current_value}[/green]")
        else:
            console.print("Current: [red]Not set[/red]")

        if var_info.get("sensitive"):
            new_value = Prompt.ask(
                f"Enter {var_name}",
                password=True,
                default=current_value if current_value else "",
                show_default=False
            )
        else:
            new_value = Prompt.ask(
                f"Enter {var_name}",
                default=current_value or var_info.get("default", "")
            )

        if new_value:
            new_config[var_name] = new_value

        console.print()

    # Configure optional variables
    console.print("[bold cyan]Optional Variables:[/bold cyan]")
    console.print("Press Enter to keep current/default values\n")

    for var_name, var_info in OPTIONAL_ENV_VARS.items():
        current_value = os.getenv(var_name) or env_file_vars.get(var_name)
        default_value = current_value or var_info["default"]

        console.print(f"[cyan]{var_name}[/cyan]")
        console.print(f"Description: {var_info['description']}")

        if var_info.get("choices"):
            console.print(f"Choices: {', '.join(var_info['choices'])}")

        new_value = Prompt.ask(
            f"Enter {var_name}",
            default=default_value,
            choices=var_info.get("choices")
        )

        if new_value and new_value != var_info["default"]:
            new_config[var_name] = new_value
        elif var_name in new_config and new_value == var_info["default"]:
            # Remove if setting back to default
            new_config.pop(var_name, None)

        console.print()

    # Save configuration
    console.print("[bold]📝 Saving configuration...[/bold]")

    if save_env_file(new_config):
        console.print("[green]✅ Configuration saved successfully![/green]")
        env_file = get_env_file_path()
        console.print(f"Saved to: [cyan]{env_file}[/cyan]")
        console.print("\n[yellow]💡 Restart your terminal or run 'source .env' to load the new configuration.[/yellow]")
    else:
        console.print("[red]❌ Failed to save configuration[/red]")


def set_variable(var_name: str, value: str) -> bool:
    """Set a specific environment variable."""
    # Validate variable name
    all_vars = {**REQUIRED_ENV_VARS, **OPTIONAL_ENV_VARS}
    if var_name not in all_vars:
        console.print(f"[red]Unknown variable: {var_name}[/red]")
        console.print(f"Valid variables: {', '.join(all_vars.keys())}")
        return False

    var_info = all_vars[var_name]

    # Validate choices if applicable
    if var_info.get("choices") and value not in var_info["choices"]:
        console.print(f"[red]Invalid value for {var_name}: {value}[/red]")
        console.print(f"Valid choices: {', '.join(var_info['choices'])}")
        return False

    # Load current config and update
    env_vars = load_env_file()
    env_vars[var_name] = value

    if save_env_file(env_vars):
        console.print(f"[green]✅ Set {var_name} = {value}[/green]")
        return True
    else:
        console.print(f"[red]❌ Failed to set {var_name}[/red]")
        return False


def validate_config() -> bool:
    """Validate current configuration and return True if all required vars are set."""
    required_config, _ = get_current_config()

    missing_vars = [var for var, value in required_config.items() if not value]

    if missing_vars:
        console.print("[red]❌ Missing required environment variables:[/red]")
        for var in missing_vars:
            var_info = REQUIRED_ENV_VARS[var]
            console.print(f"  • {var}: {var_info['description']}")
        console.print("\n[yellow]💡 Run 'mls-scraper config setup' to configure these variables.[/yellow]")
        return False
    else:
        console.print("[green]✅ All required environment variables are configured![/green]")
        return True