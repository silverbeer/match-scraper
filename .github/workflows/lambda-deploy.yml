name: Deploy Lambda to AWS

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write  # Required for OIDC authentication (if using)
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set-env
        run: |
          # Determine environment based on trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          echo "ENVIRONMENT=$ENV" >> $GITHUB_OUTPUT
          echo "Deploying to environment: $ENV"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mls-scraper-${{ steps.set-env.outputs.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image
          docker build -f Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: terraform
        run: |
          # Initialize Terraform with backend configuration
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET || 'mls-scraper-terraform-state' }}" \
            -backend-config="key=mls-scraper/${{ steps.set-env.outputs.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-east-1' }}"

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        env:
          TF_VAR_missing_table_api_token: ${{ secrets.MISSING_TABLE_API_TOKEN }}
          TF_VAR_image_tag: latest
        run: |
          terraform plan \
            -var-file="${{ steps.set-env.outputs.ENVIRONMENT }}.tfvars" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_missing_table_api_token: ${{ secrets.MISSING_TABLE_API_TOKEN }}
          TF_VAR_image_tag: latest
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          echo "FUNCTION_NAME=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "FUNCTION_ARN=$(terraform output -raw lambda_function_arn)" >> $GITHUB_OUTPUT
          echo "ECR_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

      - name: Test Lambda Invocation
        run: |
          echo "Testing Lambda function invocation..."
          aws lambda invoke \
            --function-name ${{ steps.tf-outputs.outputs.FUNCTION_NAME }} \
            --payload '{"enable_api_integration": false, "start_offset": 0, "end_offset": 0}' \
            --cli-binary-format raw-in-base64-out \
            response.json

          echo "Lambda response:"
          cat response.json

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.set-env.outputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function Name:** ${{ steps.tf-outputs.outputs.FUNCTION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function ARN:** ${{ steps.tf-outputs.outputs.FUNCTION_ARN }}" >> $GITHUB_STEP_SUMMARY
          echo "**ECR Repository:** ${{ steps.tf-outputs.outputs.ECR_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** latest (sha: ${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-plan-${{ steps.set-env.outputs.ENVIRONMENT }}
          path: terraform/tfplan
          retention-days: 30
